using System.ComponentModel.DataAnnotations;

namespace Dignus.Candidate.Back.DTOs
{
    // Note: Using existing CandidateEvaluationDto, TestEvaluationDto, BehavioralEvaluationDto, 
    // and BenchmarkComparisonDto from AIEvaluationDTOs.cs to avoid duplicates

    /// <summary>
    /// DTO for competency-based evaluation
    /// </summary>
    public class CompetencyEvaluationDto
    {
        /// <summary>
        /// Competency identifier
        /// </summary>
        public string CompetencyId { get; set; } = string.Empty;

        /// <summary>
        /// Competency name (e.g., "Clareza na Comunicação", "Empatia Emocional")
        /// </summary>
        public string Name { get; set; } = string.Empty;

        /// <summary>
        /// Competency category
        /// </summary>
        public CompetencyCategory Category { get; set; }

        /// <summary>
        /// Competency score (0.0-10.0)
        /// </summary>
        public decimal Score { get; set; }

        /// <summary>
        /// Weight of this competency in overall evaluation
        /// </summary>
        public decimal Weight { get; set; } = 1.0m;

        /// <summary>
        /// Detailed observation about this competency
        /// </summary>
        public string Observation { get; set; } = string.Empty;

        /// <summary>
        /// Justification for the score
        /// </summary>
        public string Justification { get; set; } = string.Empty;

        /// <summary>
        /// Evidence sources (tests, interviews, etc.)
        /// </summary>
        public List<string> EvidenceSources { get; set; } = new();

        /// <summary>
        /// Performance level for this competency
        /// </summary>
        public PerformanceLevel Level { get; set; }
    }


    /// <summary>
    /// DTO for specific behavioral observations
    /// </summary>
    public class BehavioralObservationDto
    {
        /// <summary>
        /// Observation category
        /// </summary>
        public string Category { get; set; } = string.Empty;

        /// <summary>
        /// Observation description
        /// </summary>
        public string Description { get; set; } = string.Empty;

        /// <summary>
        /// Timestamp when observation was made
        /// </summary>
        public TimeSpan Timestamp { get; set; }

        /// <summary>
        /// Impact level of the observation
        /// </summary>
        public ObservationImpact Impact { get; set; }
    }

    /// <summary>
    /// DTO for evaluation report generation
    /// </summary>
    public class EvaluationReportDto
    {
        /// <summary>
        /// Report identifier
        /// </summary>
        public Guid ReportId { get; set; }

        /// <summary>
        /// Report type
        /// </summary>
        public ReportType Type { get; set; }

        /// <summary>
        /// Candidate evaluation
        /// </summary>
        public CandidateEvaluationDto CandidateEvaluation { get; set; } = new();

        /// <summary>
        /// Benchmark comparison data
        /// </summary>
        public BenchmarkComparisonDto? BenchmarkComparison { get; set; }

        /// <summary>
        /// Executive summary
        /// </summary>
        public string ExecutiveSummary { get; set; } = string.Empty;

        /// <summary>
        /// Key strengths identified
        /// </summary>
        public List<string> KeyStrengths { get; set; } = new();

        /// <summary>
        /// Areas for improvement
        /// </summary>
        public List<string> AreasForImprovement { get; set; } = new();

        /// <summary>
        /// Final hiring recommendation
        /// </summary>
        public HiringRecommendation HiringRecommendation { get; set; }

        /// <summary>
        /// Report generation timestamp
        /// </summary>
        public DateTimeOffset GeneratedAt { get; set; }

        /// <summary>
        /// Report generated by (system/user)
        /// </summary>
        public string GeneratedBy { get; set; } = "AI System";
    }



    /// <summary>
    /// DTO for evaluation filters and search
    /// </summary>
    public class EvaluationFilterDto
    {
        /// <summary>
        /// Filter by evaluation status
        /// </summary>
        public EvaluationStatus? Status { get; set; }

        /// <summary>
        /// Filter by minimum overall score
        /// </summary>
        public decimal? MinScore { get; set; }

        /// <summary>
        /// Filter by maximum overall score
        /// </summary>
        public decimal? MaxScore { get; set; }

        /// <summary>
        /// Filter by recommendation level
        /// </summary>
        public RecommendationLevel? Recommendation { get; set; }

        /// <summary>
        /// Filter by evaluation date range
        /// </summary>
        public DateTimeOffset? EvaluatedAfter { get; set; }

        /// <summary>
        /// Filter by evaluation date range
        /// </summary>
        public DateTimeOffset? EvaluatedBefore { get; set; }

        /// <summary>
        /// Filter by specific competencies
        /// </summary>
        public List<string>? Competencies { get; set; }

        /// <summary>
        /// Search by candidate name
        /// </summary>
        public string? CandidateName { get; set; }

        /// <summary>
        /// Page number for pagination
        /// </summary>
        public int Page { get; set; } = 1;

        /// <summary>
        /// Items per page
        /// </summary>
        public int PageSize { get; set; } = 20;
    }

    #region Enums

    /// <summary>
    /// Evaluation status enumeration
    /// </summary>
    public enum EvaluationStatus
    {
        Pending,
        InProgress,
        Completed,
        RequiresReview,
        Approved,
        Rejected
    }

    /// <summary>
    /// Test completion status enumeration
    /// </summary>
    public enum TestCompletionStatus
    {
        NotStarted,
        InProgress,
        Completed,
        TimedOut,
        Abandoned
    }

    /// <summary>
    /// Competency category enumeration
    /// </summary>
    public enum CompetencyCategory
    {
        Technical,
        Communication,
        Behavioral,
        Cognitive,
        Leadership,
        Teamwork,
        ProblemSolving,
        Emotional
    }

    /// <summary>
    /// Performance level enumeration
    /// </summary>
    public enum PerformanceLevel
    {
        BelowExpectations,
        MeetsExpectations,
        ExceedsExpectations,
        Outstanding
    }

    /// <summary>
    /// Observation impact enumeration
    /// </summary>
    public enum ObservationImpact
    {
        Positive,
        Neutral,
        Negative,
        Critical
    }

    /// <summary>
    /// Report type enumeration
    /// </summary>
    public enum ReportType
    {
        Summary,
        Detailed,
        Executive,
        Comparative,
        Benchmark
    }

    /// <summary>
    /// Hiring recommendation enumeration
    /// </summary>
    public enum HiringRecommendation
    {
        StronglyRecommend,
        Recommend,
        Conditional,
        NotRecommend,
        Reject
    }


    /// <summary>
    /// Market performance enumeration
    /// </summary>
    public enum MarketPerformance
    {
        AboveAverage,
        Average,
        BelowAverage
    }

    #endregion
}